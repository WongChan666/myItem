/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.3.7.v20160115
 * Generated at: 2020-02-23 09:50:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class download_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/E:/DeverlopmentTool/Maven3.6/maven-repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153356282000L));
    _jspx_dependants.put("file:/E:/DeverlopmentTool/Maven3.6/maven-repository/javax/servlet/jstl/1.2/jstl-1.2.jar", Long.valueOf(1581857293853L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>文件下载</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t欢迎来到契约锁2020 年JAVA 校招测试项目。。。。。。。。。。。。。。。。。。。。。。。。。。。。。\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t这是文件下载页面.....................................................................\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<table id=\"table1\" class=\"table1\" border=\"1\" align=\"center\"></table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"application/javascript\" src=\"/static/jquery-1.11.0.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : \"getFileJson\",\r\n");
      out.write("\t\t\ttype : \"get\",\r\n");
      out.write("\t\t\tcontentType : \"application/json; charset=utf-8\",//如不设置此项，默认也为此，设置发送给后端的类型\r\n");
      out.write("\t\t\tdataType : \"json\",//设置接收后端的数据的类型\r\n");
      out.write("\t\t\tasync : true,//设置异步，不然可能接收不到后端返回的json\r\n");
      out.write("\t\t\tsuccess : function(data) {//data为后端返回的json\r\n");
      out.write("\t\t\t\tvar s =\"<tr><th width='6%'>文件id</th><th width='6%'>文件大小(byte)</th><th width='6%'>文件类型</th><th width='12%'>文件名</th><th width='50%'>文件保存服务器目录</th><th width='10%'>上传时间</th><th width='10%'>操作</th></tr>\";\r\n");
      out.write("\t\t\t\t//遍历数据\r\n");
      out.write("\t\t\t\t$(data).each(function(){\r\n");
      out.write("\t\t\t\t\ts+=\"<tr><td>\"+this.f_id+\"</td><td>\"\r\n");
      out.write("\t\t\t\t\t+ this.f_size+ \"</td><td>\"\r\n");
      out.write("\t\t\t\t\t+this.f_type+\"</td><td>\"\r\n");
      out.write("\t\t\t\t\t+this.f_oldName+\"</td><td>\"\r\n");
      out.write("\t\t\t\t\t+ this.f_savePath+\"</td><td>\"\r\n");
      out.write("\t\t\t\t\t+ this.f_date\r\n");
      out.write("\t\t\t\t\t+ \"</td><td><a href='getFile?f_id=\"+this.f_id+\"'\"+\">--下载--</a></td></tr>\";\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t$(\"#table1\").html(s);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
